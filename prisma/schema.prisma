generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                   @id @default(autoincrement())
  uuid             String                @unique @default(uuid())
  email            String                @unique
  contact          String?               @unique
  username         String                @unique
  balance          Float                 @default(0)
  walletAddress    String                @unique
  secretKey        String                @unique
  password         String
  email_verified   Boolean               @default(false)
  contact_verified Boolean               @default(false)
  role             String                @default("user")
  status           String                @default("activated")
  isOnline         Boolean               @default(true)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  trustlines       Boolean               @default(false)
  addresses        Address[]
  cart             Cart[]
  orders           Order[]
  tokens           PersonalAccessToken[]
  rider            Rider?
  storage          Storage[]
  profile          UserProfile?
  vendors          Vendor[]
}

model UserProfile {
  id         Int     @id @default(autoincrement())
  user_uuid  String  @unique @default(uuid())
  first_name String
  last_name  String
  profile    String?
  country    String?
  state      String?
  city       String?
  address    String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  User       User    @relation(fields: [user_uuid], references: [uuid])
}

model Address {
  id        Int     @id @default(autoincrement())
  user_uuid String
  location  String?
  longitude String?
  latitude  String?
  address   String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  User      User    @relation(fields: [user_uuid], references: [uuid])
}

model PersonalAccessToken {
  id        Int      @id @default(autoincrement())
  user_uuid String
  token     String   @unique
  ipAddress String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [user_uuid], references: [uuid])
}

model EmailVerificationTokens {
  id        Int      @id @default(autoincrement())
  user_uuid String
  email     String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetTokens {
  id        Int      @id @default(autoincrement())
  user_uuid String
  email     String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Storage {
  id          Int     @id @default(autoincrement())
  uuid        String  @unique @default(uuid())
  slug        String  @unique
  user_uuid   String
  base_url    String?
  path        String
  size        String?
  type        String?
  use         String?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  user        User         @relation(fields: [user_uuid], references: [uuid])

  @@unique([user_uuid, use])
}

model Vendor {
  id           Int              @id @default(autoincrement())
  uuid         String           @unique @default(uuid())
  slug         String?          @unique
  user_uuid    String
  name         String?
  description  String?
  profile      String?
  cover        String?
  country      String?
  state        String?
  city         String?
  location     String?
  longitude    String?
  latitude     String?
  address      String?
  ratings      Float            @default(0)
  featured     Float            @default(0)
  status       String           @default("pending")
  is_online    Boolean          @default(true)
  category     String?
  opening_time String?
  closing_time String?
  balance      Float            @default(0)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  cart         Cart[]
  foods        Food[]
  orders       Order[]
  user         User             @relation(fields: [user_uuid], references: [uuid])
  documents    VendorDocuments?
}

model VendorDocuments {
  id              Int      @id @default(autoincrement())
  uuid            String   @unique
  country         String?
  id_number       String?
  id_upload       String?
  business_number String?
  business_upload String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  documents       Vendor   @relation(fields: [uuid], references: [uuid])
}

model Category {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  name      String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  foods     Food[]
}

model Food {
  id              Int         @id @default(autoincrement())
  uuid            String      @unique @default(uuid())
  vendor_uuid     String
  category_uuid   String?
  name            String?
  description     String?
  image           String?
  price           Float       @default(0)
  discount        Float       @default(0)
  processing_time String?
  ratings         Float       @default(0)
  featured        Float       @default(0)
  ready_made      Boolean     @default(true)
  on_menu         Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  stock           Float       @default(0)
  cartItems       CartItem[]
  category        Category?   @relation(fields: [category_uuid], references: [uuid])
  vendor          Vendor      @relation(fields: [vendor_uuid], references: [uuid])
  orderItems      OrderItem[]
}

model Cart {
  id          Int        @id @default(autoincrement())
  uuid        String     @unique @default(uuid())
  user_uuid   String
  vendor_uuid String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [user_uuid], references: [uuid])
  vendor      Vendor     @relation(fields: [vendor_uuid], references: [uuid])
  cartItems   CartItem[]

  @@unique([user_uuid, vendor_uuid])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  cart_uuid String
  food_uuid String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price     Float    @default(0)
  cart      Cart     @relation(fields: [cart_uuid], references: [uuid])
  food      Food     @relation(fields: [food_uuid], references: [uuid])

  @@unique([cart_uuid, food_uuid])
}

model Order {
  id               Int         @id @default(autoincrement())
  uuid             String      @unique @default(uuid())
  user_uuid        String
  vendor_uuid      String
  order_number     String?
  total_amount     Float       @default(0)
  discount_amount  Float       @default(0)
  paid_amount      Float       @default(0)
  delivery_address String?
  payment_method   String?
  payment_status   String      @default("pending")
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  delivery_charges Float       @default(0)
  delivery_contact String?
  delivery_email   String?
  delivery_name    String?
  order_status     String      @default("pending")
  rider_uuid       String?
  rider            Rider?      @relation(fields: [rider_uuid], references: [uuid])
  user             User        @relation(fields: [user_uuid], references: [uuid])
  vendor           Vendor      @relation(fields: [vendor_uuid], references: [uuid])
  orderItems       OrderItem[]
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  order_uuid String
  food_uuid  String
  price      Float
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  food       Food     @relation(fields: [food_uuid], references: [uuid])
  order      Order    @relation(fields: [order_uuid], references: [uuid])
}

model Rider {
  id           Int             @id @default(autoincrement())
  uuid         String          @unique @default(uuid())
  user_uuid    String          @unique
  balance      Float           @default(0)
  country      String?
  state        String?
  city         String?
  location     String?
  longitude    String?
  latitude     String?
  address      String?
  ratings      Float           @default(0)
  featured     Float           @default(0)
  status       String          @default("pending")
  is_online    Boolean         @default(true)
  opening_time String?
  closing_time String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  orders       Order[]
  user         User            @relation(fields: [user_uuid], references: [uuid])
  documents    RiderDocuments?
}

model RiderDocuments {
  id              Int      @id @default(autoincrement())
  uuid            String   @unique
  country         String?
  id_number       String?
  id_upload       String?
  vehicle_number  String?
  document_upload String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  documents       Rider    @relation(fields: [uuid], references: [uuid])
}

model Team {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid())
  profile     String
  name        String
  role        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id      Int    @id @default(autoincrement())
  uuid    String @unique @default(uuid())
  email   String
  phone   String
  address String
}

model Partner {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())
  logo String
  name String
}

model cache {
  key        String @id @db.VarChar(255)
  value      String
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String
  options        String?
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement())
  queue        String @db.VarChar(255)
  payload      String
  attempts     Int    @db.SmallInt
  reserved_at  Int?
  available_at Int
  created_at   Int

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(255)
  batch     Int
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt?
  ip_address    String? @db.VarChar(45)
  user_agent    String?
  payload       String
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}
